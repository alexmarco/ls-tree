---
alwaysApply: false
description: To keep our code organised, clean, and collaborative, it is essential that you follow this protocol when working with Git.
---

# Git Workflow Protocol

## 1. Branch Management

All new features or fixes must be developed in their own branch, never directly on `main` or `develop`.

### 1.1 Naming Convention

- **Feature:** `feat/feature-name` (e.g., `feat/google-login`)
- **Bug fix:** `fix/bug-description` (e.g., `fix/form-submission-error`)
- **Chore:** `chore/improvement-description` (e.g., `chore/refactor-api-service`)

### 1.2 Branch Creation

Always create your branch from the latest version of `develop`:

```shell
git checkout develop
git pull origin develop
git checkout -b feat/your-branch-name
```

## 2. Commits: When and How

A commit should be a logical and complete unit of work.

### 2.1 When to Commit

Make a commit every time you complete a small, functional step of your task. This facilitates review and change rollback.

### 2.2 Message Format

Use **Conventional Commits**.

- **Structure:** `<type>(<scope>): <description>`
- **Common types:** `feat`, `fix`, `docs`, `refactor`, `test`, `chore`.
- **Examples:**
  - `feat(auth): add email and password login`
  - `fix(api): resolve 500 error when fetching users`
  - `docs: update README with installation instructions`
  - `chore: bump version to 25.10.4`

## 3. Pull Requests (PRs)

When your branch is ready to be integrated into `develop`, open a Pull Request.

### 3.1 Before Creating the PR

Sync your branch with the latest changes from `develop` to avoid conflicts: `git pull origin develop --rebase`

### 3.2 PR Creation

- **Clear title:** Use the same format as commits.
- **Description:** Explain what the PR does, how to test it, and link the issue it resolves (e.g., `Closes #123`).
- **Review:** Assign at least one reviewer. Don't merge your own PR without approval. Address comments by pushing new commits to your branch.

### 3.3 GitHub CLI (gh) for PR Management

We use GitHub CLI (`gh`) to streamline PR operations from the command line. This tool provides a more efficient workflow for managing pull requests.

#### 3.3.1 Creating PRs with gh

Create a pull request directly from your branch:

**Para Bash/Linux/macOS:**

```shell
# Create PR with title and body
gh pr create --title "feat(auth): add email and password login" \
  --body "This PR implements email and password authentication.

## Changes
- Add login form component
- Implement authentication service
- Add validation for email format

## Testing
- [ ] Test login with valid credentials
- [ ] Test login with invalid credentials
- [ ] Test email validation

Closes #123"

# Create PR and assign reviewers
gh pr create --title "fix(api): resolve 500 error when fetching users" \
  --body "Fixes the 500 error in user endpoint" \
  --reviewer @username1,@username2
```

**For PowerShell (Windows):**

```powershell
# Create PR with title and body (use simple quotes)
gh pr create --title 'feat(auth): add email and password login' --body 'This PR implements email and password authentication.

## Changes
- Add login form component
- Implement authentication service
- Add validation for email format

## Testing
- [ ] Test login with valid credentials
- [ ] Test login with invalid credentials
- [ ] Test email validation

Closes #123'

# Create PR and assign reviewers (use simple quotes)
gh pr create --title 'fix(api): resolve 500 error when fetching users' --body 'Fixes the 500 error in user endpoint' --reviewer '@username1,@username2'
```

**Secure alternative for all shells:**

```shell
# Create PR with interactive mode (recommended for prevent chars problems)
gh pr create

# Create PR with specific base branch
gh pr create --base develop --title "chore: update dependencies"
```

#### 3.3.2 Managing PRs with gh

```shell
# List all PRs
gh pr list

# List PRs with specific status
gh pr list --state open
gh pr list --state closed
gh pr list --state merged

# View PR details
gh pr view 123

# View PR in browser
gh pr view 123 --web

# Check PR status and CI
gh pr checks 123

# Add comments to PR
gh pr comment 123 --body "Thanks for the review! I've addressed the feedback."

# Request review from specific users
gh pr review 123 --request-changes --body "Please fix the linting errors"
gh pr review 123 --approve --body "Looks good to me!"

# Merge PR (only after approval)
gh pr merge 123 --squash --delete-branch

# Close PR without merging
gh pr close 123
```

#### 3.3.3 Working with PR Branches

```shell
# Checkout PR locally for review
gh pr checkout 123

# Create a new branch from PR
gh pr checkout 123 --branch feature-branch-name

# Sync your branch with the latest changes
gh pr sync

# Push changes to PR branch
git push origin feat/your-branch-name

# Update PR description
gh pr edit 123 --body "Updated description with new information"
```

#### 3.3.4 PR Templates and Automation

```shell
# Create PR with template
gh pr create --template .github/pull_request_template.md

# Add labels to PR
gh pr edit 123 --add-label "bug,priority:high"

# Set milestone
gh pr edit 123 --milestone "Sprint 2025.01"

# Link to issues
gh pr edit 123 --body "This PR addresses the issues mentioned in #456 and #789"
```

#### 3.3.5 Best Practices with gh

1. **Always use interactive mode for complex PRs (recommended for avoid char problems):**

   ```shell
   gh pr create  # Opens interactive editor
   ```

2. **Check PR status before merging:**

   ```shell
   gh pr checks 123
   gh pr merge 123 --squash --delete-branch
   ```

3. **Use descriptive titles and bodies:**

   **Bash/Linux/macOS:**

   ```shell
   gh pr create --title "feat(component): add user dashboard" \
     --body "Implements user dashboard with charts and statistics"
   ```

   **PowerShell (Windows):**

   ```powershell
   gh pr create --title 'feat(component): add user dashboard' --body 'Implements user dashboard with charts and statistics'
   ```

4. **Automate common tasks:**

   ```shell
   # Create PR and assign yourself as reviewer
   gh pr create --assignee @me --reviewer @team-lead
   ```

5. **PowerShell-specific recommendations:**

   - **Use single quotes** instead of double quotes to avoid problems with special characters
   - **Avoid backslashes** (`\`) for line continuation - use single quotes in one line
   - **Use interactive mode** when in doubt about special characters
   - **Check encoding** if you have problems with accented characters

   ```powershell
   # ✅ Correct in PowerShell
   gh pr create --title 'feat: add functionality' --body 'Description with accents'

   # ❌ Problematic in PowerShell
   gh pr create --title "feat: add functionality" --body "Description with accents"
   ```

## 4. Merging

Once approved, the PR will be merged into `develop`.

- **Method:** Always use **Squash and Merge**. This groups all your commits into one in `develop`, keeping the history clean.
- **Cleanup:** After merging, delete your branch.

## 5. Version Management and Tags

We use tags to mark stable version releases in production.

### 5.1 When to Tag

Create a tag on the `main` branch right after merging the changes from `develop` that compose a new version.

### 5.2 Calendar Versioning (CalVer)

We use a format based on the release date, making the age of a version evident. The format is `YY.MM.MICRO`.

- **YY**: Last two digits of the current year (e.g., 2025 -> 25).
- **MM**: Month with leading zero (e.g., 09 for September).
- **MICRO**: A sequential number starting at 0 for each month and incrementing with each new release within that same month.

### 5.3 Tag Creation Process

Example for the first release of October 2025:

```shell
# 1. Switch to main and update
git checkout main
git pull origin main

# 2. Create an annotated tag (with message)
git tag -a v25.10.0 -m "October 2025 Release"

# 3. Push the tag to remote repository
git push origin v25.10.0
```

If there were another release in the same month, the tag would be `v25.10.1`.

## 6. Release Workflow

### 6.1 Automatic Releases

- Tags trigger automatic PyPI releases via GitHub Actions
- Version numbers in `pyproject.toml` must match the tag
- All dependencies must be properly declared

### 6.2 Testing Before Release

- All tests must pass in CI
- Code must be linted and formatted with `ruff`
- Type checking must pass with `mypy`

### 6.3 Changelog Generation

We use **git-cliff** to automatically generate changelogs from git commits following Conventional Commits format.

#### 6.3.1 Manual Changelog Generation

```bash
# Generate complete changelog
git-cliff --output CHANGELOG.md

# Generate only unreleased changes
git-cliff --unreleased --output CHANGELOG.md

# Generate changelog for specific version
git-cliff --tag v25.10.8 --output CHANGELOG.md
```

#### 6.3.2 Automatic Changelog in CI/CD

- **Release workflow**: Automatically generates changelog before building package
- **Configuration**: Uses `cliff.toml` for custom formatting and grouping
- **Integration**: Changelog is included in the release artifacts

#### 6.3.3 Changelog Format

The generated changelog follows:
- **Keep a Changelog** format
- **Semantic Versioning** compliance
- **Conventional Commits** parsing
- **Emoji categorization** for better readability
- **GitHub links** for issues and commits

#### 6.3.4 Commit Message Requirements

For proper changelog generation, use Conventional Commits format:

```bash
# Features
git commit -m "feat(auth): add email and password login"

# Bug fixes
git commit -m "fix(api): resolve 500 error when fetching users"

# Documentation
git commit -m "docs: update README with installation instructions"

# Chores
git commit -m "chore: bump version to 25.10.4"

# Breaking changes
git commit -m "feat(api)!: change authentication method"
```

This protocol will help us work more efficiently and maintain code quality.
