---
alwaysApply: false
description: To keep our code organised, clean, and collaborative, it is essential that you follow this protocol when working with Git.
---

# Git Workflow Protocol

## 1. Branch Management

All new features or fixes must be developed in their own branch, never directly on `main` or `develop`.

### 1.1 Naming Convention

- **Feature:** `feat/feature-name` (e.g., `feat/google-login`)
- **Bug fix:** `fix/bug-description` (e.g., `fix/form-submission-error`)
- **Chore:** `chore/improvement-description` (e.g., `chore/refactor-api-service`)

### 1.2 Branch Creation

Always create your branch from the latest version of `develop`:

```shell
git checkout develop
git pull origin develop
git checkout -b feat/your-branch-name
```

## 2. Commits: When and How

A commit should be a logical and complete unit of work.

### 2.1 When to Commit

Make a commit every time you complete a small, functional step of your task. This facilitates review and change rollback.

### 2.2 Message Format

Use **Conventional Commits**.

- **Structure:** `<type>(<scope>): <description>`
- **Common types:** `feat`, `fix`, `docs`, `refactor`, `test`, `chore`.
- **Examples:**
  - `feat(auth): add email and password login`
  - `fix(api): resolve 500 error when fetching users`
  - `docs: update README with installation instructions`
  - `chore: bump version to 25.10.4`

## 3. Pull Requests (PRs)

When your branch is ready to be integrated into `develop`, open a Pull Request.

### 3.1 Before Creating the PR

Sync your branch with the latest changes from `develop` to avoid conflicts: `git pull origin develop --rebase`

### 3.2 PR Creation

- **Clear title:** Use the same format as commits.
- **Description:** Explain what the PR does, how to test it, and link the issue it resolves (e.g., `Closes #123`).
- **Review:** Assign at least one reviewer. Don't merge your own PR without approval. Address comments by pushing new commits to your branch.

## 4. Merging

Once approved, the PR will be merged into `develop`.

- **Method:** Always use **Squash and Merge**. This groups all your commits into one in `develop`, keeping the history clean.
- **Cleanup:** After merging, delete your branch.

## 5. Version Management and Tags

We use tags to mark stable version releases in production.

### 5.1 When to Tag

Create a tag on the `main` branch right after merging the changes from `develop` that compose a new version.

### 5.2 Calendar Versioning (CalVer)

We use a format based on the release date, making the age of a version evident. The format is `YY.MM.MICRO`.

- **YY**: Last two digits of the current year (e.g., 2025 -> 25).
- **MM**: Month with leading zero (e.g., 09 for September).
- **MICRO**: A sequential number starting at 0 for each month and incrementing with each new release within that same month.

### 5.3 Tag Creation Process

Example for the first release of October 2025:

```shell
# 1. Switch to main and update
git checkout main
git pull origin main

# 2. Create an annotated tag (with message)
git tag -a v25.10.0 -m "October 2025 Release"

# 3. Push the tag to remote repository
git push origin v25.10.0
```

If there were another release in the same month, the tag would be `v25.10.1`.

## 6. Release Workflow

### 6.1 Automatic Releases

- Tags trigger automatic PyPI releases via GitHub Actions
- Version numbers in `pyproject.toml` must match the tag
- All dependencies must be properly declared

### 6.2 Testing Before Release

- All tests must pass in CI
- Code must be linted and formatted with `ruff`
- Type checking must pass with `mypy`

This protocol will help us work more efficiently and maintain code quality.
